import java.nio.file.Files
import java.nio.file.Paths
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
}

plugins {
  id 'java'
  id 'maven-publish'
  id 'distribution'
  id 'idea'
}

repositories {
  mavenCentral()
}


group "org.logstash.inputs"
version Files.readAllLines(Paths.get("version")).first()

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
}

String nettyVersion = '4.1.115.Final'
String junitVersion = '5.11.2'



dependencies {
  testImplementation 'org.apache.logging.log4j:log4j-core:2.17.1'
  testImplementation 'org.hamcrest:hamcrest-library:2.2'
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

  implementation "io.netty:netty-buffer:${nettyVersion}"
  implementation "io.netty:netty-codec:${nettyVersion}"
  implementation "io.netty:netty-common:${nettyVersion}"
  implementation "io.netty:netty-transport:${nettyVersion}"
  implementation "io.netty:netty-handler:${nettyVersion}"
  implementation "io.netty:netty-transport-native-unix-common:${nettyVersion}" // this is needed from Netty 4.1.78.Final on

  implementation group: 'commons-io', name: 'commons-io', version: '2.17.0' // used from Netty
  compileOnly 'org.apache.logging.log4j:log4j-api:2.17.1' // provided by Logstash
  compileOnly group: 'org.jruby', name: 'jruby-core', version: "9.4.8.0" // provided by Logstash
  compileOnly group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: "1.78.1"  // provided by Logstash (JRuby-OpenSSL)
}

test {
  useJUnitPlatform()
}

configurations {
  testImplementation.extendsFrom compileOnly
}

task generateGemJarRequiresFile {
  doLast {
    File jars_file = file('lib/logstash-input-tcp_jars.rb')
    jars_file.newWriter().withWriter { w ->
      w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
      w << "require \'jar_dependencies\'\n"
      configurations.runtimeClasspath.allDependencies.each {
        w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
      }
      w << "\nrequire_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
    }
  }
}

task vendor {
  doLast {
    String vendorPathPrefix = "vendor/jar-dependencies"
    configurations.runtimeClasspath.allDependencies.each { dep ->
      File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
      String groupPath = dep.group.replaceAll('\\.', '/')
      File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
      newJarFile.mkdirs()
      Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
    }
    String projectGroupPath = project.group.replaceAll('\\.', '/')
    File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
    projectJarFile.mkdirs()
    Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
  }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)
