import java.nio.file.Files
import java.nio.file.Paths
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING
/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: "java"
apply plugin: 'maven'
apply plugin: "distribution"
apply plugin: "idea"

group "org.logstash.inputs"
version Files.readAllLines(Paths.get("version")).first()

sourceCompatibility = JavaVersion.VERSION_1_8

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
  }
}

repositories {
  mavenCentral()
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.0'
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
  classifier = null
}

dependencies {
  compile 'io.netty:netty-all:4.1.18.Final'
  compile 'io.netty:netty-tcnative-boringssl-static:2.0.7.Final'
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
}

task vendor(dependsOn: shadowJar) << {
  String vendorPathPrefix = "vendor/jar-dependencies"
  String projectGroupPath = project.group.replaceAll('\\.', '/')
  File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
  projectJarFile.mkdirs()
  Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
}
